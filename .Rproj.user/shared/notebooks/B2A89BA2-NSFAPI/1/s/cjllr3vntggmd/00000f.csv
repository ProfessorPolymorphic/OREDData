"0",""
"0",""
"0","# Base URL for the API"
"0","base_url <- ""https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22"""
"0",""
"0","printFields <- ""rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"""
"0",""
"0","# Initialize an empty data frame to store results"
"0","all_awards <- tibble()"
"0",""
"0","# Number of results per page (as per API settings)"
"0","results_per_page <- 25"
"0",""
"0","# Variable to keep track of the current page number"
"0","current_page <- 1"
"0",""
"0","# Variable to control the loop"
"0","keep_going <- TRUE"
"0",""
"0","while(keep_going) {"
"0","    # Calculate the offset for the current page"
"0","    offset <- (current_page - 1) * results_per_page + 1"
"0",""
"0","    # Construct the full URL with offset"
"0","    url <- paste0(base_url, ""&offset="", offset, ""&printFields="", printFields)"
"0",""
"0","    # Make the API call"
"0","    response <- GET(url)"
"0",""
"0","    # Check if the call was successful"
"0","    if (status_code(response) == 200) {"
"0","        # Extract and parse the JSON data"
"0","        json_data <- content(response, type = ""text"", encoding = ""UTF-8"")"
"0","        parsed_data <- fromJSON(json_data, flatten = TRUE)"
"0",""
"0","        # Extract the 'award' data and add to the all_awards data frame"
"0","        awards_data <- parsed_data$response$award"
"0","        all_awards <- bind_rows(all_awards, as_tibble(awards_data))"
"0",""
"0","        # Debug: Print the current page number and number of awards fetched"
"0","        print(paste(""Page:"", current_page, ""- Awards fetched:"", length(awards_data$id)))"
"0",""
"0","        # Check if the current page has less than results_per_page awards, then it's the last page"
"0","        if (length(awards_data$id) < results_per_page) {"
"0","            keep_going <- FALSE"
"0","        } else {"
"0","            current_page <- current_page + 1"
"0","        }"
"0","    } else {"
"0","        print(paste(""Failed to fetch data: Status code"", status_code(response)))"
"0","        keep_going <- FALSE"
"0","    }"
"0","}"
"1","[1]"
"1"," ""Page: 1 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 2 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 3 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 4 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 5 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 6 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 7 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 8 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 9 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 10 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 11 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 12 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 13 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 14 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 15 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 16 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 17 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 18 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 19 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 20 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 21 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 22 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 23 - Awards fetched: 25"""
"1","
"
"1","[1]"
"1"," ""Page: 24 - Awards fetched: 6"""
"1","
"
"0","write.csv(all_awards, ""UINSF.csv"")"
"2","Error in utils::write.table(all_awards, ""UINSF.csv"", col.names = NA, sep = "","",  : 
  unimplemented type 'list' in 'EncodeElement'
"
